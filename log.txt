Mood Map Development Log
------------------------

Set up documentation engine dartdoc.

    To run dartdoc just type dartdoc in the root of the project.

Found a really good resource for some basic ui tool building here:

      https://github.com/fablue/building-a-social-network-with-flutter

Built the default application view which I call the application shell.
It consists of a bottom navigation bar with the three views on it.

First I am going to start with the manage view because it will also lay the
foundation for the rating view. I hope to reuse the container of the list
view and just populate it with different list elements for each different
page.

It seems that I will start building another stateful widget for each of the pages
and place them in the three areas of the scaffold in app_shell.dart.

It looks as if the PageView Widget takes containers as children. These containers
extend Widget. Thus I can continue implementing Stateful widgets as my children to
this page.

Starting to build the manage view dart file...

Found that the way to build a cross app bar is to use the Row widget and
expand a column within it.

         
It seems that I've done all that I can with the view of the manage Emotions view
without going into widget loading or databases so I will leave it off for now.

Now Im moving on to the Rating view. Luckily, it seems that much of the rating
view is the same as the manage view so I can take the bones out and move them
over.

Well that was easy.

Now it is time to think about notifications/prompting. I want to do it in a dialog
box but where do I put the button that brings it up on the rating page?

Looks like the flutter library has a charts api but if it doesnt work then I can
use 3rd party apis like the ones in the resources gitub I found

Finished the implementation of the dropdowns for the rating mechanism.
            
            -May want to switch to a slider for the mechanism later on

Instead of putting the prompting and notifications in the rating screen I think
it is better placed in the manage screen because that is what we are doing is
managing notifications.

         I've decided to use a tab bar to switch between adding and removing
         emotions and managing notifications

Finished the architecture for the management tab.

Now it is time to build the Reminders mangament tab.

The reminders tab will have a nested scaffold that is reactive to the selections
in the dropdown.

   Never
   Daily -> At view
   Hourly -> Starting / ending at view
   Every 30 minutes -> Starting / ending at views.


You are waiting on an answer for the color of the dropdown so you began to implement
the fourth view, the Journaling view.


You fixed the color of the bottom bar by setting the type and fixed color attributes

You got an item to display in the manage emotion view. You converted the item into a
stateless widget and changed the viewmode to Flexible. You should go ahead and 
change the other components to be stateless widgets.
       
       One thing you saw was the ability to swipe to the side to show a delete icon
       for a list item. You should consider this as a vieable option for emotion deltetion.

       
Left off trying to implement the List Title Bar abstraction. Left a post on SO.

Even if I cant get the ListTitleBar to work, I should implement the list view as
a scaffold on each page and add the floating action button that way. In this way,
I could use the body to hold the title bar and the listview, and have the action
button float over it all.


Implemented the chart example for analysis. You can remove it at your leisure.


Implemented a Title bar.

Now I would like to step away from the Rating stuff because it will overhaul a large
portion of the app and take time to attack that which I know Will make it into the
app like the Journaling Screen.

Got a really good start on implementing the Text entry box for the Journaling feature.
Two things that I noticed are that when you are typing the text in you can not see
it behind the keyboard and it also seems that you can swipe left and right throught
the pages while you are typing. I should look for a freeze functionality. Dont look
too hard at these just yet though.

You should look at implementing the Textbox class around the text field as it looks
like it will do wrapping for you.


Asked a question on stack overflow about how to implement a standard text box.

Finished skeleton of Rating view.

Next I should work on building a List tile that suits my needs for the navigable
list items.


Finished out rating screens although I had to keep the titles generic as there was
no way to change them dyanmically that I could see.

Finished Emotion pallet.

Working on add item popup for Rating workflow. Have a prototype.

Erroring out for some reason on adding Medication button


For some reason pressing the calendar button wont work.

Progress Report
---------------
At this point, I am wrapping up the UI development. Of course, there will be things
left over like themeing and colors but those can wait until a finalization phase.
There remain several open areas of work that need to be addressed. The first and
largest area is that of backend development. I am certain now that firestore is the
proper solution and have created a No SQL data dictionary as proof and point. The
bulk of the work is in the learning hurdle of understanding how to integrate it into
the app. The rest is execution and from what I have seen I believe that I am set up
to succeed here even if the implementation takes a lot of time on task. A second area
is a critical piece of the app: notifications. From my observations, it seems that I
will have to rely on third party plugins, which is an area of great concern. This is
one of the critical areas that I have explored the least in. Thirdly, the other critical
value proposition is that of charts and graphs in the Tracking area. I have identified
the libraries I will be using so there is some confidence there. This will be a rather
large undertaking, however, seeing as I have none of the UI done. It strikes me that
it may behoove me to do the UI first and the rest will follow. Something else to keep
in mind is the large amount of mock data I will have to wrangle for testing and building.
Next comes authentication and login. In my minds eye, it would be the right decision to
have an actualy login page. Firebase provides an authentication API but I dont know that
much about it. I saw a tutorial on how to create a login page so it seems that there is
precedent. This is all I can think of for now but there is definitely more.

Immediate tasks:
----------------


Future Tasks
------------
1. Save reminders persistence
2. Change Rating mechanism away from dropdown list.


Bug List
--------
1. Manage Medication Start date not changing on new date selection.
2. String interpolation in Med date picker
3. Layout of quality mechanism on Sleep view.
4. 


Data Dictionary
---------------

Collection: Reminders Settings

            reminding emotions : boolean : true
            emotion interval : string : Daily
            emotion starting : string : 9:30 AM

            reminding sleep : boolean : true
            sleep remind time : string : 9:30 AM
            
            reminding exercise : boolean : true
            exercise remind time : string : 9:30 PM

Collection: Medications

            Collection: Medications

                        name: string: : ""
                        dosage: string : ""
                        start date : string : ""

Collection: Emotions

            emotion name: string : ""

Collection: Emotion Ratings

            Collection: Categories

                        Collection: Specifics

                                    Collection: Emotions

                                                emotion name: string : ""
                                                rating: int : 0

Collection: Sleep Ratings

            date : string : todays date
            to bed : string : 9:30 PM
            to sleep : string : 9:30 PM
            woke up : string 7:30 AM
            quality : int : 10

Collection: Exercise Ratings

            date : string : todays date
            did exercise : boolean : No
            type : string : cardio
            duration : string : 30 Minutes

Collection: Journal Entries

            date : string : todays date
            circumstances : string : ""
            description : string : ""
            external happenings : string : ""
            internal happenings : string : ""
            reflections : string : ""

-----------------------------------------------------------------------------------

Where I Left Off
----------------
At this point, most all of the UI is mocked out. The remaining areas of UI development
are in the tracking screen and the Journaling screen. The Journaling screen is being 
held up by a bug out there in the world that I cant help at the moment, although I 
cant say I have put that much effort or thought into a workaround. The Tracking
screen is being held up by the simple fact that I have no data to work with. The 
thought process was that if I took care of the database first, then I could set up
the tracking screen using test data therein. Even though implementing the Tracking
screen will likely need to be approached from both the UI and the backend at the
same time, I still think fleshing out the database part of it before I get too
far in is a good policy.

I left off after just having learned how to store data in the database with my 
proof of concept in the reminder setting screen. This was a major accomplishment.
I havent learned how to get the data from the database yet but I seem to have
finally found the right documentation for how to do so. I've book marked it 
my browser.

One major missing piece of knowledge that still needs to be investigated as
far as the actual usage of the app goes is how to store state. It seems that
every time I switch screens my data disappears.

Finally, another major piece is notifications. I have a native plugin that I
know should work for this and have cursorily investigated it. I just havent
gotten that far with it. 

Some remaining miscelaneous items include
-----------------------------------------
Login/Logout
User management
Themes and colors

Here is how you are going to do this.

1. Create object that holds a string for category, specifics, and emotions (not sure about rating yet).
   and store it in RateView.
2. Pass a reference to it into each of the three member views.
3. Set the state accordingly whenever the navigations happen. Somehow.
4. See how to nest the data accordingly in the database.

The loading of pages should be kept along with the context. The context should show how to load
each of the pages using stored values for each level.


First pass at emotion context failed. I need to pay attention to what functions I pass into
each navigable list item. Perhaps I should split the navigable list item into three items
each for categories, specifics, and rating?

You had to break down the rating away from the emotion item because they are unique in the
database. You should create a navigable list item for each Category and Specifics and
figure out how to do a callback to the navigation function but set the Category or specific
before. Try setting it and calling Funtion.apply();. Pass a reference to the emotion context
into each Navigable item.

Made a lot of good headway.

Next you need to make specifics rate act like category rate with listening for changes in the
datebase in the constructor and such. Next is to continue with the emotion level construction.

It seems now that the database structure is what is messing everything up.

After some research it seems that my initial pass at a model wont work. Because documents are
static, subcollections are not easily implementable. I need to use several tables instead.

Categories table

           -Category Name

Specifics Table

          -Specifics Name
          -Category Name

Emotions Table

         -Emotion Name
         -Specifics
         -Category

Emotions Rating

         -Emotion Rating
         -Emotion Name
         -Specifics Name
         -Category Name


Then when I am querying, the simple way to do things is to get all of the results from
each table and filter based upon the context.

Emotion Workflow Log
--------------------

First I am going to just work on categories.

The table will be called emotion_categories.

Now that I am done with categories I am working on the specifics rating.

Changing table name to emotion_specifics

Working now on saving emotions from emotion pallete

Finished working on pallet emotions.

Now I need to work on loading and saving emotions that are associate with the specific.


Emotion Rating Issues
---------------------
All emotions will show up in the pallet because they are not filtered. However, each
of those emotions has a specific and context attached to it. This means that when I
try to add them to the workflow by adding them from the pallet they will be filtered
out based on the context.

The conceptual problem is that one emotion can have many contexts and specifics but
I am storing them in one table with the emotion name. So there could be several entries
with the same type of emotion.

However, this really isnt a problem because I can just filter out duplicates when I
pull them down for the emotion pallet.

Specifications
--------------
1. Emotions are to be pulled down for the pallet from the emotions table and identically
named emotions are to be filtered out. Done

2. When an emotion is pulled from the pallet and put onto the rating list I will set the
context and specific on it such that when it is saved it will persist and reload when
I once again am in that context.

3. The emotions for the rating screen are to be pulled down based upon the context and
specifics. Done

Make two separate firebase references.

I need to save new emotions with the new context when I add them from the pallet.

Docket
------

Major
-----
- Tracking
- Notifications
- User Management
- General Way to Rate Emotions without categories

Minor
-----
- View Only View For Journaling
- Long Press to Remove in certain workflows
- Change the component that is used to rate things. The drop downs are not easy to use.
- Navigate To Journal from emotions rate on button press

Polish
------
- Snackbar Notifications
  - Reminder Settings Confirmation
  - Sleep
  - Excercise
  - Tooltips
    - You can press to remove
- Ensure entire journal entry fields are visible by either making them scrollable or
  limiting amount of characters that are entered.
- Information Icon and popup for Journaling Views
